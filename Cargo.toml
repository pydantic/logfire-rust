[package]
name = "logfire"
version = "0.7.0"
edition = "2024"
license = "MIT"
rust-version = "1.85"
description = "Rust SDK for Pydantic Logfire"
documentation = "https://docs.rs/logfire"
homepage = "https://github.com/pydantic/logfire-rust"
repository = "https://github.com/pydantic/logfire-rust"

[dependencies]
log = "0.4"
env_filter = "0.1"

# deps for grpc export
http = { version = "1.2", optional = true }
tonic = { version = "0.13", optional = true }

rand = "0.9.0"

opentelemetry = { version = "0.30", default-features = false, features = ["trace", "logs"] }
opentelemetry_sdk = { version = "0.30", default-features = false, features = ["trace", "experimental_metrics_custom_reader", "logs"] }
opentelemetry-otlp = { version = "0.30", default-features = false, features = ["trace", "metrics", "logs"] }
futures-util = "0.3"

tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-opentelemetry = "0.31"

thiserror = "2"

serde = { version = "1", features = ["derive"], optional = true }
nu-ansi-term = "0.50.1"
chrono = "0.4.39"
regex = "1.11.1"

[dev-dependencies]
async-trait = "0.1.88"
futures = { version = "0.3.31", features = ["futures-executor"] }
insta = "1.42.1"
opentelemetry_sdk = { version = "0.30", default-features = false, features = ["testing"] }
regex = "1.11.1"
tokio = {version = "1.44.1", features = ["test-util", "macros", "rt-multi-thread"] }
ulid = "1.2.0"

# Dependencies for examples
axum = { version = "0.8", features = ["macros"] }
axum-tracing-opentelemetry = { version = "0.29", features = ["tracing_level_info"] }
axum-otel-metrics = "0.12.0"
actix-web = "4.0"
opentelemetry-instrumentation-actix-web = { version = "0.22", features = ["metrics"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
futures-util = "0.3"

[features]
default = ["export-http-protobuf"]
serde = ["dep:serde"]
export-grpc = ["opentelemetry-otlp/grpc-tonic", "opentelemetry-otlp/tls", "dep:http", "dep:tonic"]
export-http-protobuf = ["opentelemetry-otlp/http-proto", "opentelemetry-otlp/reqwest-blocking-client", "opentelemetry-otlp/reqwest-rustls"]
export-http-json = ["opentelemetry-otlp/http-json", "opentelemetry-otlp/reqwest-blocking-client", "opentelemetry-otlp/reqwest-rustls"]

[lints.rust]
missing_docs = "warn"

[lints.clippy]
print_stdout = "deny"
print_stderr = "deny"
dbg_macro = "deny"
unwrap_used = "deny"
# in general we lint against the pedantic group, but we will whitelist
# certain lints which we don't want to enforce (for now)
pedantic = { level = "deny", priority = -1 }
implicit_hasher = "allow"
